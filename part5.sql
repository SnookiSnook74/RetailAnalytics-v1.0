-- Active: 1693889407428@@127.0.0.1@21000@postgres@public
-- Создаем функцию, определяющую предложения, ориентированные на рост частоты визитов.
-- Параметры функции:
--      первая и последняя даты периода
--      добавляемое число транзакций
--      максимальный индекс оттока
--      максимальная доля транзакций со скидкой (в процентах)
--      допустимая доля маржи (в процентах)

/* Определение периода. Пользователь вручную задает период действия 
разрабатываемого предложения, указывая первую и конечную его даты. 

Определение текущей частоты посещений клиента в заданный период.
Из конечной даты заданного периода вычитается первая дата,
после чего полученное значение делится на среднюю интенсивность транзакций клиента 
(поле Customer_Frequency таблицы Клиенты).
Итоговый результат сохраняется в качестве базовой интенсивности транзакций клиента 
в течение заданного периода. 

Определение транзакции для начисления вознаграждения.
Система определяет порядковый номер транзакции в рамках заданного периода, 
на которую должно быть начислено вознаграждение.
Для этого значение, полученное на шаге 2, округляется согласно арифметическим правилам до целого,
после чего к нему добавляется число транзакций, заданное пользователем.
Итоговое значение является целевым количеством транзакций, 
которое должен совершить клиент для получения вознаграждения.*/

/* 
-- Определение вознаграждения --
 
Определение группы для формирования вознаграждения. 
Для формирования вознаграждения выбирается группа, отвечающая
последовательно следующим критериям:
 -- Индекс востребованности группы – максимальный из всех возможных.
 -- Индекс оттока по данной группе не должен превышать заданного пользователем значения. 
	В случае, если коэффициент оттока превышает установленное значение, 
	берется следующая по индексу востребованности группа;
 -- Доля транзакций со скидкой по данной группе – менее заданного пользователем значения. 
 	В случае, если для выбранной группы превышает установленное значение, 
 	берется следующая по индексу востребованности группа, удовлетворяющая также критерию по
    оттоку. 
 
Определение максимально допустимого размера скидки для вознаграждения. 
Пользователь вручную определяет долю маржи (в процентах), которую допустимо использовать 
для предоставления вознаграждения по группе. Итоговое значение максимально допустимой
скидки рассчитывается путем умножения заданного значения на среднюю маржу клиента по группе. 

Определение величины скидки. Значение, полученное на шаге 5,
сравнивается с минимальной скидкой, которая была зафиксирована для
клиента по данной группе, округленной вверх с шагом в 5%. В случае,
если минимальная скидка после округления меньше значения,
получившегося на шаге 5, она устанавливается в качестве скидки для
группы в рамках предложения для клиента. В противном случае данная
группа исключается из рассмотрения, и для формирования предложения
для клиента процесс повторяется, начиная с шага 4 (используются
следующая подходящая по описанным критериям группа). 
*/

-- DROP FUNCTION IF EXISTS generate_growth_offers(TIMESTAMP, TIMESTAMP, INT, FLOAT , FLOAT, FLOAT);


--Основная логика:
-- Определение текущей частоты посещений: Для каждого клиента рассчитывается средняя частота визитов
-- на основе разницы между конечной и начальной датами заданного периода и средней интенсивностью транзакций клиента.
-- Определение транзакции для начисления вознаграждения:
-- Система определяет, на какой транзакции в рамках заданного периода следует начислить вознаграждение клиенту. Для этого к текущему количеству транзакций добавляется число транзакций, заданное пользователем.
-- Определение группы для формирования вознаграждения: 
-- Выбирается группа товаров, которая соответствует ряду критериев, включая индекс востребованности, индекс оттока и долю транзакций со скидкой.
-- Определение максимально допустимого размера скидки: 
-- На этом этапе рассчитывается максимальная глубина скидки на основе средней маржи клиента по выбранной группе товаров и заданной доли маржи.
-- Определение величины скидки: 
-- Затем, система определяет окончательную глубину скидки для каждой группы товаров, сравнивая рассчитанное значение со значением минимальной скидки для клиента по этой группе.

-- Для того чтобы Postgres воспринимал дату в превычном формате
SET datestyle = 'ISO, DMY';

-- Входные данные
CREATE OR REPLACE FUNCTION generate_growth_offers(
    -- первая и последняя даты периода
    date_start TIMESTAMP,
    date_end TIMESTAMP,
    -- добавляемое число транзакций
    added_transactions INT,
    -- максимальный индекс оттока
    max_churn_index FLOAT,
    -- максимальная доля транзакций со скидкой (в процентах)
    max_discount_ratio FLOAT,
    -- допустимая доля маржи (в процентах)
    max_margin_ratio FLOAT
)
-- Выходные данные
RETURNS TABLE (
    customer_id INT,
    start_date TIMESTAMP,
    end_date TIMESTAMP,
    required_transactions_count INT,
    group_name VARCHAR(255),
    offer_discount_depth INT
)
AS $$
BEGIN
    RETURN QUERY
        WITH purchase_history_total AS (
        /* Определение максимально допустимого размера скидки для вознаграждения. 
        Пользователь вручную определяет долю маржи (в процентах), которую допустимо использовать 
        для предоставления вознаграждения по группе. Итоговое значение максимально допустимой
        скидки рассчитывается путем умножения заданного значения на среднюю маржу клиента по группе. */
                SELECT
                    /* Итоговое значение максимально допустимой скидки рассчитывается 
                       путем умножения заданного значения на среднюю маржу клиента по группе. */
                    (AVG(purchase_history.group_summ) - AVG(purchase_history.group_cost)) / 100.0 * max_margin_ratio 
                    / AVG(purchase_history.group_cost) AS pre_offer_discount_depth,
                    purchase_history.customer_id,
                    purchase_history.group_id
                FROM
                    purchase_history
                GROUP BY
                    purchase_history.customer_id,
                    purchase_history.group_id
        )
        SELECT 
            DISTINCT ON (groupsview.customer_id) groupsview.customer_id :: INT,
            date_start as start_date,
            date_end as end_date,
            -- Определение текущей частоты посещений клиента в заданный период.
            (EXTRACT(EPOCH FROM (date_end - date_start)) / 86400.0 / customer_frequency)
            -- Определение транзакции для начисления вознаграждения.
            :: INT + added_transactions AS target_transactions_count,
            sku_groups.group_name AS group_name,
            /* В случае,
               если минимальная скидка после округления меньше значения,
               получившегося на шаге 5, она устанавливается в качестве скидки для
               группы в рамках предложения для клиента. */
            (CEIL(group_minimum_discount / 0.05) * 0.05 * 100) :: INT AS offer_discount_depth
        FROM groupsview
            JOIN sku_groups ON sku_groups.group_id = groupsview.group_id
            JOIN periods ON periods.customer_id = groupsview.customer_id AND periods.group_id = groupsview.group_id 
            JOIN customersview ON customersview.customer_id = groupsview.customer_id
            JOIN purchase_history_total ON purchase_history_total.customer_id = groupsview.customer_id 
            AND purchase_history_total.group_id = groupsview.group_id
        WHERE
            -- Индекс оттока по данной группе не должен превышать заданного пользователем значения. 
            group_churn_rate <= max_churn_index
            -- Доля транзакций со скидкой по данной группе – менее заданного пользователем значения. 
            AND group_discount_share < max_discount_ratio / 100
            /* Определение величины скидки. Значение, полученное на шаге 5,
               сравнивается с минимальной скидкой, которая была зафиксирована для
               клиента по данной группе, округленной вверх с шагом в 5%. */
            AND CEIL(group_minimum_discount / 0.05) * 0.05 < pre_offer_discount_depth
        ORDER BY
            groupsview.customer_id,
            -- Индекс востребованности группы – максимальный из всех возможных. + DISTINCT в SELECT
            groupsview.group_affinity_index DESC, 
            groupsview.group_id;
END;
$$ LANGUAGE plpgsql;

SELECT * FROM generate_growth_offers (
    '20.06.2022 00:00:00', 
    '25.08.2022 00:00:00',
    1,
    4,
    80,
    50
);
